import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.datasets import load_diabetes

from src.utils import plot_dataset

diabetes = load_diabetes()
print(diabetes.data.shape)
print(diabetes.feature_names)
print(diabetes.target.shape)

# # Convert to DataFrame
# diabetes_df = pd.DataFrame(data=diabetes.data, columns=diabetes.feature_names)
# diabetes_df['Target'] = diabetes.target  # Adding the target column for housing prices
#
# # Display the first few rows of the DataFrame
# print(diabetes_df.head())
#
# # Plot the data Pair Plot
# sns.set_theme(style="ticks", font_scale=0.9)
# sns.pairplot(diabetes_df, hue="age", height=1.2)

# Select the first feature for X and the target for y
X = diabetes.data  # Selecting the 'age' feature [:, 0:1]
y = diabetes.target  # Diabetes cases
print("X", X[:5])
print("Y", y[:5])

# Plot the generated data
# plot_dataset(X, y)

# Split dataset to train and test data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Training The Model using Scikit Learn
model = LinearRegression()
model.fit(X_train, y_train)
model_sc = LinearRegression()
model_sc.fit(X_train_scaled, y_train)

# Extracting model parameters
beta_1 = model.coef_[0]
beta_0 = model.intercept_

# Extracting model parameters for scaled data
beta_1_sc = model_sc.coef_[0]
beta_0_sc = model_sc.intercept_

# Predicting with the model
Y_predict = model.predict(X_test)
Y_predict_sc = model.predict(X_test_scaled)

# R-squared value - Mean Squared Error
r_squared = model.score(X_test, y_test)
r_squared_sc = model.score(X_test_scaled, y_test)

# Output the results
print(f"beta_1 (slope): {beta_1}, scaled: {beta_1_sc}")
print(f"beta_0 (intercept): {beta_0}, scaled: {beta_0_sc}")
print(f"R-squared: {r_squared:.4f}, scaled: {r_squared_sc:.4f}")
print(len(X_test))
print(len(y_test))
# Plot the original data points and the regression line
plt.scatter(X_test, y_test, color='blue', label='Data points')
plt.plot(X_test, Y_predict, color='red', linewidth=2, label=f'Regression line: Y = {beta_0:.2f} + {beta_1:.2f}X')
plt.xlabel('Age')
plt.ylabel('Diabetes Cases')
plt.title('Simple Linear Regression on Diabetes Data')
plt.legend()
plt.grid(True)
plt.show()

# # Plot the scaled data points and the regression line
# plt.scatter(X_test_scaled, y_test, color='blue', label='Data points')
# plt.plot(X_test_scaled, Y_predict_sc, color='red', linewidth=2,
#          label=f'Regression line: Y = {beta_0_sc:.2f} + {beta_1_sc:.2f}X')
# plt.xlabel('Age')
# plt.ylabel('Diabetes Cases')
# plt.title('Simple Linear Regression on Scaled Diabetes Data')
# plt.legend()
# plt.grid(True)
# plt.show()
